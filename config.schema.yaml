# yaml-language-server: $schema=http://json-schema.org/draft-07/schema#
$schema: http://json-schema.org/draft-07/schema#
type: object
additionalProperties: false
required:
  - branding
  - schema
  - static
  - pages
properties:
  branding:
    description: Branding information for the API
    type: object
    additionalProperties: false
    properties:
      logo:
        type: string
        format: uri
        description: Path or URL to the API's logo
      name:
        type: string
        description: Name of the API
    required:
      - logo
      - name
  footer:
    description: |
      HTML to insert at the bottom of every page
    type: string
  static:
    description: |
      Directory to look for additional static files that will be copied to the template's `static` directory, to be served at the root of the website
    type: string
    examples:
      - ./static
  pages:
    description: |
      Directory to look for additional documentation pages, as markdown or MDSveX files. The final URL will be the path to the markdown file relative to the value of `pages`, without the `.md` extension. For example, with `pages: ./docs`, a page defined in `./docs/foo/bar.md` will be available at `/foo/bar`. Files are copied at build time into the template code at `src/routes/(path to file without extension)/+page.mdsvex`. If the filename is prefix with a `+`, it'll be copied in src/routes directly (not in a subdirectory)
    type: string
  modules:
    type: object
    additionalProperties: false
    description: Categorize your schema's items. If not specified, all items will be displayed in a single module
    properties:
      index:
        description: Configure the "index" module, that contains every schema item. Set this to false, or remove it, to disable the index module. Set to true to enable it, with default values
        oneOf:
          - type: boolean
          - type: object
            additionalProperties: false
            properties:
              title:
                type: string
                description: Display name of the index module
                examples:
                  - Index
              description:
                type: string
                description: A Markdown-formatted text describing the index module
                examples:
                  - The entire GraphQL schema

      static:
        type: array
        description: Manually declare modules.
        items:
          type: object
          additionalProperties: false
          required:
            - title
            - intro
            - items
            - name
          properties:
            title:
              type: string
              description: Display name of the module
            name:
              type: string
              description: URL-friendly name of the module. Cannot be "index" (reserved for the index module)
              not:
                oneOf:
                  - type: string
                    pattern: ^index$
            intro:
              type: string
              description: A Markdown-formatted text describing the module
            icon:
              type: string
              format: uri
              description: Path or URL to an icon for the module
            items:
              type: array
              description: List of schema item names that belong in that module
              items:
                type: string
      filesystem:
        type: object
        additionalProperties: false
        description:
          Auto-categorize using your API's source code tree. Every value
          in here can use %module%, which will be replaced by the module we are currently
          checking.
        properties:
          names:
            description: How to get the modules' names?
            oneOf:
              - type: object
                additionalProperties: false
                properties:
                  in:
                    type: string
                    description: |
                      Directory to look for modules. The modules' names will be
                      the name of all the sub-directories in this directory
              - type: object
                additionalProperties: false
                properties:
                  is:
                    type: array
                    description: Explicitly list the modules' names
                    items:
                      type: string
                      not:
                        oneOf:
                          - type: string
                            pattern: ^index$
          order:
            type: array
            items:
              type: string
            description: |
              Order in which to display the modules. If a module is not
              listed here, it will be displayed at the end. If not specified, the order is alphabetical
          intro:
            type: string
            description:
              Path to a markdown file describing the module. The first
              paragraph will serve as the short description, while the <h1>'s content
              will serve as the module's display name
          icon:
            type: string
            format: uri
            description: Path or URL to an icon for the module
          items:
            type: array
            description:
              How to know that a given schema item (a type, a query, a
              mutation, etc.) should belong to that module?
            items:
              type: object
              additionalProperties: false
              properties:
                files:
                  type: string
                  description: Glob pattern of file paths to search in
                match:
                  type: string
                  description:
                    Regular expressions that will be tried for every file
                    found in `files`. The regexp must define a named capture group
                    named `name`. A given GraphQL Schema item will be considered as
                    part of that module if a line of any file as specified by `files`
                    matches this regular expression, with the capture group named
                    `name` having as value the GraphQL schema type's name.
                contribution:
                  type: string
                  description: |
                    URL to use for the "contribute" button for that item. Available placeholders are:

                    - %module%, 
                    - %name%, the item's name
                    - %path%, the path to the file that matched

                    If the value is not specified, the "contribute" button will not be displayed
              required:
                - files
                - match
        required:
          - intro
          - items
  schema:
    oneOf:
      - type: string
        format: uri
      - type: object
        additionalProperties: false
        properties:
          introspection:
            type: object
            additionalProperties: false
            properties:
              url:
                type: string
                description: URL where to query the API to generate a schema via introspection
                format: uri
              headers:
                type: object
                additionalProperties:
                  type: string
                description:
                  Define headers to use when doing the POST request. For
                  example, an authorization header
            required:
              - url
        required:
          - introspection
    description: A path or URL to a graphl schema file, or configuration for introspection
