# yaml-language-server: $schema=https://json-schema.org/draft/2020-12/schema
$schema: https://json-schema.org/draft/2020-12/schema
$id: config.graphinx.ewen.works
title: Graphinx
description: Configuration file for Graphinx, a tool to generate a documentation website for a GraphQL API
type: object
additionalProperties: false
required:
  - branding
  - schema
  - static
  - description
  - pages
definitions:
  SiteBranding:
    title: Site branding
    description: Branding information for the API
    type: object
    additionalProperties: false
    properties:
      logo:
        $ref: "#/definitions/SiteBrandingLogo"
      name:
        type: string
        description: Name of the API
    required:
      - logo
      - name
  SiteBrandingLogo:
    title: Site branding logo
    description: Logo for the API
    type: object
    additionalProperties: false
    properties:
      light:
        type: string
        format: uri
        description: Path or URL to the API's logo which will be used on a light background
      dark:
        type: string
        format: uri
        description: Path or URL to the API's logo which will be used on a dark background
  schema_introspection:
    title: Schema introspection
    description: Introspect a GraphQL schema of a given running GraphQL API server
    additionalProperties: false
    type: object
    properties:
      url:
        type: string
        description: URL where to query the API to generate a schema via introspection
        format: uri
      headers:
        type: object
        additionalProperties:
          type: string
        description: Define headers to use when doing the POST request. For
          example, an authorization header
    required:
      - url
  module_categorizer:
    title: Module categorizer
    type: object
    additionalProperties: false
    properties:
      json: 
        type: string
        description: Path to a JSON file mapping module names to schema item names
      at:
        type: string
        description: Glob pattern of file paths to search in. %module% will be replaced with the module being checked
      regex:
        type: string
        description: Pattern to search for in the files. %module% will be replaced with the module being checked, and %name% with the name of the item being checked. %name% will be categorized into %module% if the regex matches
      pattern:
        type: string
        description: Pattern to search for in the files. %module% will be replaced with the module being checked, and %name% with the name of the item being checked. %name% will be categorized into %module% if the pattern matches. It's like regex, but matches plain strings instead of regular expressions.
  static_module:
    title: Static module configuration
    type: object
    additionalProperties: false
    required:
      - title
      - intro
      - items
      - name
    properties:
      title:
        type: string
        description: Display name of the module
      name:
        type: string
        description: URL-friendly name of the module. Cannot be "index" (reserved for the index module)
        not:
          oneOf:
            - type: string
              pattern: ^index$
      intro:
        type: string
        description: A Markdown-formatted text describing the module
      icon:
        type: string
        format: uri
        description: Path or URL to an icon for the module
      contribution:
        type: string
        format: uri
        description: URL to contribute to the documentation of an item. Available placeholders are %module% and %name%, the name of the item. If omitted, the "contribute" button will not be displayed
      source:
        type: string
        format: uri
        description: URL to view the source code for item. Available placeholders are %module% and %name%. If omitted, the "source" button will not be displayed
      items:
        type: array
        description: List of schema item names that belong in that module. Can be glob patterns.
        items:
          type: string
  filesystem_module_names:
    title: Module names
    oneOf:
      - type: object
        additionalProperties: false
        properties:
          in:
            type: string
            description: |
              Directory to look for modules. The modules' names will be
              the name of all the sub-directories in this directory
      - type: object
        additionalProperties: false
        properties:
          is:
            type: array
            description: Explicitly list the modules' names
            items:
              type: string
              not:
                oneOf:
                  - type: string
                    pattern: ^index$
  filesystem_modules:
    title: Match modules with source code
    type: object
    additionalProperties: false
    description: Auto-categorize using your API's source code tree. Every value
      in here can use %module%, which will be replaced by the module we are currently
      checking.
    required:
      - intro
      - items
    properties:
      names:
        description: How to get the modules' names?
        $ref: "#/definitions/filesystem_module_names"
      order:
        type: array
        items:
          type: string
        description: Order in which to display the modules. If a module is not listed here, it will be displayed at the end. If not specified, the order is alphabetical
      intro:
        type: string
        description: Path to a markdown file describing the module. The first
          paragraph will serve as the short description, while the `<h1>`'s content
          will serve as the module's display name. Additional metadata can be used by templates when put in the file's YAML frontmatter (put three dashes, YAML content, and three dashes at the begnning of the file)
      icon:
        type: string
        format: uri
        description: Path or URL to an icon for the module
      contribution:
        type: string
        format: uri
        description: URL to contribute to the documentation for this module. If omitted, the "contribute" button will not be displayed
      source:
        type: string
        format: uri
        description: URL to view the source code for this module. If omitted, the "source" button will not be displayed
      items:
        type: array
        description: How to know that a given schema item (a type, a query, a
          mutation, etc.) should belong to that module?
        items: { $ref: "#/definitions/filesystem_matcher" }

  filesystem_matcher:
    title: Source code module matcher
    type: object
    additionalProperties: false
    properties:
      files:
        type: string
        description: Glob pattern of file paths to search in
      debug:
        type: array
        description: Display debug information when this matcher found a match or did not found a match for a given list of item names
        items:
          type: string
      match:
        type: string
        description: Regular expressions that will be tried for every file
          found in `files`. The regexp must define a named capture group
          named `name`. A given GraphQL Schema item will be considered as
          part of that module if a line of any file as specified by `files`
          matches this regular expression, with the capture group named
          `name` having as value the GraphQL schema type's name.
      contribution:
        type: string
        description: |
          URL to use for the "contribute" button for that item. Available placeholders are:

          - %module%, 
          - %name%, the item's name
          - %path%, the path to the file that matched

          If the value is not specified, the "contribute" button will not be displayed
      source:
        type: string
        description: URL to view the source code for this item. Available placeholders are the same as for `contribution`
    required:
      - files
      - match
  index_module:
    title: Index module configuration
    description: Configure the "index" module, that contains every schema item. Set this to false, or remove it, to disable the index module. Set to true to enable it, with default values
    type: object
    additionalProperties: false
    properties:
      title:
        type: string
        description: Display name of the index module
        examples:
          - Index
      description:
        type: string
        description: A Markdown-formatted text describing the index module
        examples:
          - The entire GraphQL schema
  modules:
    title: Modules configuration
    type: object
    additionalProperties: false
    description: Categorize your schema's items. If not specified, all items will be displayed in a single module
    properties:
      index: { $ref: "#/definitions/index_module" }
      filesystem: { $ref: "#/definitions/filesystem_modules" }
      static:
        type: array
        description: Manually declare modules.
        items: { $ref: "#/definitions/static_module" }
  relay:
    title: Relay
    type: object
    description: Configure handling for GraphQL Relay connection types. Queries that have a return type that match the `connection` property will be considered as connection types, and will display `Connection<T>` in the documentation, where `T` is the type of the `node` field.
    additionalProperties: false
    required:
      - connection
    properties:
      connection:
        type: string
        description: How are Connection types named?
        examples:
          - (Query|Mutation)\w+Connection
      edge:
        type: string
        description: A dotted path to the edge field in the connection type (default is `edges`)
        examples:
          - edges
      node:
        type: string
        description: A dotted path to the node field in the connection type (default is `edges.node`)
        examples:
          - edges.node
          - nodes
  result-types:
    title: Result types
    type: object
    description: Configure error-related types. Queries that have a return type that match  `result` will be considered as error types, and will display `Result<T>` in the documentation, where `T` is the type of `success`'s field `data`.
    additionalProperties: false
    properties:
      result:
        type: string
        description: How are your result types named?
        examples:
          - (Query|Mutation)\w+Result
      success:
        type: string
        description: How are your success types named?
        examples:
          - (Query|Mutation)\w+Success
      data:
        type: string
        description: A dotted path that describes how get to the data field in the success type (default is `data`)
        examples:
          - data
  schema:
    title: Schema
    type: object
    additionalProperties: false
    description: A path or URL to a graphl schema file, or configuration for introspection
    properties:
      introspection:
        $ref: "#/definitions/schema_introspection"
      static:
        type: string
        description: Path or URL to a GraphQL schema file
        examples:
          - ./schema.graphql

properties:
  template:
    type: string
    description: Degit repository specifier to use as the website template. Defaults to Graphinx's default template.  See [degit's documentation](https://www.npmjs.com/package/degit#basics) for more information.  Basic syntax is `owner/repo/path#branch` for github repositories, or `https://example.com/...` for any git repository.  The only difference is that the default branch name is "main" instead of master (i.e. use  `...#master` to clone the master branch, and `...#main` is not needed)
    examples:
      - graphinx/graphinx/packages/template#main
  branding:
    $ref: "#/definitions/SiteBranding"

  description:
    type: string
    description: Markdown-formatted text to display on the homepage. Use this to mention the purpose of the API, how to authenticate, and anything you want. Depending on the template you use, a search bar, as well as the list of all the modules will be displayed below, as well as other information such as the endpoint URL. Check with your template's documentation.

  footer:
    description: HTML to insert at the bottom of every page
    type: string
  static:
    description: Directory to look for additional static files that will be copied to the template's `static` directory, to be served at the root of the website
    type: string
    examples:
      - ./static
  pages:
    description: >-
      Directory to look for additional documentation pages, as markdown or [MDSveX (.svx)](https://mdsvex.pngwn.io/) files. The final URL will be the path to the markdown file relative to the value of `pages`, without the `.md` extension. For example, with `pages: ./docs`, a page defined in `./docs/foo/bar.md` will be available at `/foo/bar`. Files are copied at build time into the template code at `src/routes/(path to file without extension)/+page.svx`. If the filename is prefix with a `+`, it'll be copied in src/routes directly (not in a subdirectory)
    type: string
  environment:
    description: Define environment variables that will be made available to the template.
    type: object
    additionalProperties:
      type: string
  relay: { $ref: "#/definitions/relay" }
  errors: { $ref: "#/definitions/result-types" }
  modules:
    $ref: "#/definitions/modules"
  schema:
    $ref: "#/definitions/schema"
