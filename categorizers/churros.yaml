.all:
  title: { in: ./%module%/README.md }
  description: { in: ./%module%/README.md }
  icon: ./%module%/icon.svg
  items:
    # YAML frontmatter
    - in: ./%module%/README.md
      matchers:
        - regex: '^include:\s*[.*%name%.*]'
          flags: gmi # default flags are gm
        - regex: '^include:\s*-\s+%name%'
    - in: ./%module%/**/*.ts
      matchers:
        - ast-grep: # an ast-grep rule object
            pattern: builder.$A($NAME)
            constraints:
              NAME: { regex: '^[''"]%name%[''"]$' }
        # A lighter syntax: NAME automatically has the regex constraint '^[''"]%name%[''"]$'
        - ast-grep:
            pattern: builder.$_($NAME, $$$)
        # It's possible to add additional constraints--the built-in constraint on NAME still exists, until you re-define it
        - ast-grep:
            pattern: builder.$_($PARENT, $NAME, $$$)
            constraints:
              PARENT: { kind: identifier, regex: Type$ }
        # Even lighter syntax: a plain string is equivalent to {rule: {pattern: ...}}
        - ast-grep: "builder.$_($$$, { name: $NAME})"
        # You can still add constraints even with this shortcut
        - ast-grep: "builder.$OP($$$, { name: $NAME}, $$$)"
          constraints:
            OP: { kind: property_identifier }
        - ast-grep: "builder.$_($$$, { name: $NAME, $$$ })"
        - ast-grep: "builder.$_($$$, { name: $NAME, $$$ }, $$$)"
        - ast-grep: "builder.$_($$$, { variant: $NAME})"
        - ast-grep: "builder.$_($$$, { variant: $NAME}, $$$)"
        - ast-grep: "builder.$_($$$, { variant: $NAME, $$$ })"
        - ast-grep: "builder.$_($$$, { variant: $NAME, $$$ }, $$$)"
        # Fallback comment
        - regex: ^\s*//graphinx:\s+%item%\s*$

    # - in: ./%module%/**/*.ts
    #   # .queryField, .mutationField, .objectType, .prismaObject, and mode
    #   matches: builder\s*\.\w+\(['"]%name%['"]
    # - in: ./%module%/**/*.ts
    #   # .objectField, .prismaObjectField
    #   matches: builder\s*\.\w+\(\w+, ['"]%name%['"]
    # - in: ./%module%/**/*.ts
    #   # .enumType and more
    #   matches: 'name:\s*[''"]%name%[''"]'
    # - in: ./%module%/**/*.ts
    #   # variants
    #   matches: 'variant:\s*[''"]%name%[''"]'
    # - in: ./%module%/**/*.ts
    #   # fallback just in case, //graphinx: item name
    #   matches: ^\s*//graphinx:\s+%item%\s*$
