# Assumes your Pothos builder instance is a variable named "builder". If you have another name, just replace "builder" with your variable name in patterns.

module1:
  title: Module 1
  description: My module's description
  color: "#ff0000"
  icon: ./module-icons/module1.svg
  # items gets inherited from .all if not specified

.all:
  items:
    - in: ./%module%/**/*.ts
      ast-grep:
        - rule:
            pattern: builder.$A($NAME)
            constraints:
              NAME: { regex: '^[''"]%name%[''"]$' }
          # A lighter syntax: NAME automatically has the regex constraint '^[''"]%name%[''"]$'
        - pattern: builder.$A($NAME, $$$)
        # Even lighter: a plain string is equivalent to a pattern rule
        - builder.$A($_, $NAME, $$$)
        - "builder.$A($$$, { name: $NAME})"
        - "builder.$A($$$, { name: $NAME}, $$$)"
        - "builder.$A($$$, { name: $NAME, $$$ })"
        - "builder.$A($$$, { name: $NAME, $$$ }, $$$)"
        - "builder.$A($$$, { variant: $NAME})"
        - "builder.$A($$$, { variant: $NAME}, $$$)"
        - "builder.$A($$$, { variant: $NAME, $$$ })"
        - "builder.$A($$$, { variant: $NAME, $$$ }, $$$)"
    # - in: ./%module%/**/*.ts
    #   # .queryField, .mutationField, .objectType, .prismaObject, and mode
    #   matches: builder\s*\.\w+\(['"]%name%['"]
    # - in: ./%module%/**/*.ts
    #   # .objectField, .prismaObjectField
    #   matches: builder\s*\.\w+\(\w+, ['"]%name%['"]
    # - in: ./%module%/**/*.ts
    #   # .enumType and more
    #   matches: 'name:\s*[''"]%name%[''"]'
    # - in: ./%module%/**/*.ts
    #   # variants
    #   matches: 'variant:\s*[''"]%name%[''"]'
    # - in: ./%module%/**/*.ts
    #   # fallback just in case, //graphinx: item name
    #   matches: ^\s*//graphinx:\s+%item%\s*$
