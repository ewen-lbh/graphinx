#!/usr/bin/env node
import { program } from "commander"
import { version } from "../package.json"
import yaml from "yaml"
import { Convert, type Config } from "./config.js"
import {
  readFileSync,
  writeFileSync,
  existsSync,
  mkdirSync,
  renameSync,
} from "node:fs"
import { transformStrings } from "./utils.js"
import { replacePlaceholders } from "./placeholders.js"
import degit from "degit"
import { rimrafSync } from "rimraf"
import type { BuiltData } from "./built-data.js"
import { getAllModules, getAllResolvers } from "./modules.js"
import { loadSchema } from "./schema-loader.js"
import path from "node:path"

program
  .version(version)
  .option(
    "-c, --config <path>",
    "Path to the configuration file",
    ".graphinx.yaml"
  )
  .option("-k, --keep", "Keep the build area after building", false)
  .parse(process.argv)

const options = program.opts()

if (!existsSync(options.config)) {
  console.error(`Config file not found: ${options.config}`)
  process.exit(1)
}

const { modules, ...restOfConfig } = Convert.toConfig(
  JSON.stringify(yaml.parse(readFileSync(options.config, "utf-8")))
)

const config: Config = {
  ...transformStrings(restOfConfig, replacePlaceholders),
  modules: {
    ...modules,
    index: transformStrings(modules?.index, replacePlaceholders),
  },
}

const BUILD_AREA_DIRECTORY = ".build"
const DEFAULT_TEMPLATE = "ewen-lbh/graphinx/packages/template#main"

if (!options.keep && existsSync(BUILD_AREA_DIRECTORY))
  rimrafSync(BUILD_AREA_DIRECTORY)

if (!existsSync(BUILD_AREA_DIRECTORY)) {
  const emitter = degit(config.template ?? DEFAULT_TEMPLATE, {
    cache: true,
    force: true,
    verbose: true,
  })

  emitter.on("info", console.info)
  await emitter.clone(BUILD_AREA_DIRECTORY)
}

const templateConfig = JSON.parse(
  readFileSync(path.join(BUILD_AREA_DIRECTORY, "package.json"), "utf-8")
)

let injectionPath = "src/data.generated.ts"

if ("graphinx" in templateConfig && templateConfig.graphinx?.inject) {
  injectionPath = templateConfig.graphinx.inject
} else {
  console.warn(
    `Warning: No inject configuration found in template's package.json. If you're the template author, add a graphinx > inject field to your package.json. Set it to the file path you want Graphinx to inject built data into. Defaulting to ${injectionPath}`
  )
}

const schema = await loadSchema(config)
console.log(`Loaded ${Object.keys(schema.types).length} types from schema`)

const resolvers = await getAllResolvers(schema, config)

const builtData: BuiltData = {
  modules: await getAllModules(schema, config, resolvers),
  resolvers,
  schema,
  config,
}

const typescriptDecl = `// This file is generated by Graphinx. Do not edit.
import type { BuiltData } from 'graphinx';
export const data: BuiltData = ${JSON.stringify(builtData, null, 2)};`
const jsdocDecl = `// This file is generated by Graphinx. Do not edit.
/** @type {require('graphinx').BuiltData} */
export const data = ${JSON.stringify(builtData, null, 2)};`

mkdirSync(path.join(BUILD_AREA_DIRECTORY, path.dirname(injectionPath)), {
  recursive: true,
})

writeFileSync(
  path.join(BUILD_AREA_DIRECTORY, injectionPath),
  injectionPath.endsWith(".ts") || injectionPath.endsWith(".tsx")
    ? typescriptDecl
    : jsdocDecl
)

console.log(config)

if (!options.keep) rimrafSync(BUILD_AREA_DIRECTORY)
